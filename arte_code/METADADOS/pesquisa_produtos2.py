# pesquisa_produtos_revisado.py

import google.generativeai as genai
import os
from dotenv import load_dotenv
import pandas as pd
import json
import time

# --- CONFIGURA√á√ÉO INICIAL ---
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=api_key)

# Modelo de IA
model = genai.GenerativeModel(model_name='gemini-2.5-flash-lite')

# Caminhos dos arquivos
BASE_PRODUTOS = r'sheets/PRODUTOS/base_produtos_master_500.xlsx'
OUTPUT_FILE = r'C:\Users\pietr\OneDrive\.vscode\arte_\sheets\RESULTADO_metadados\produtos_master_pesquisa_tecnico.xlsx'


# Fun√ß√£o para gerar conte√∫do t√©cnico
def gerar_conteudo(marca, modelo, descricao):
    """
    Cria um prompt t√©cnico e solicita ao modelo apenas especifica√ß√µes objetivas.
    """
    print(f"üîé Pesquisando: {marca} {modelo}...")

    prompt = f"""
Voc√™ √© um especialista em cataloga√ß√£o t√©cnica de produtos musicais e eletr√¥nicos.

Sua tarefa √© retornar EXCLUSIVAMENTE as especifica√ß√µes t√©cnicas confirmadas do produto abaixo:

Marca: {marca}
Modelo: {modelo}
Descri√ß√£o conhecida: "{descricao}"

Regras:
1. Liste apenas especifica√ß√µes t√©cnicas objetivas (ex: pot√™ncia RMS, imped√¢ncia, conex√µes, dimens√µes, materiais, n√∫mero de canais, etc).
2. N√£o inclua texto narrativo, opini√£o, marketing ou coment√°rios adicionais.
3. N√£o invente dados. Se n√£o houver informa√ß√£o confirmada para um campo, responda "N√ÉO ENCONTRADO".
4. O resultado deve ser entregue em formato JSON, estruturado como:

{{
  "Marca": "{marca}",
  "Modelo": "{modelo}",
  "Especificacoes": {{
    "Categoria": "...",
    "Potencia": "...",
    "Impedancia": "...",
    "Conectores": "...",
    "Dimensoes": "...",
    "Material": "...",
    "Outros": "..."
  }}
}}

Se nenhuma informa√ß√£o t√©cnica confirmada existir, retorne:
{{ "Marca": "{marca}", "Modelo": "{modelo}", "Especificacoes": "N√ÉO ENCONTRADO" }}
"""

    try:
        response = model.generate_content(prompt)
        cleaned = response.text.strip().replace("```json", "").replace("```", "")
        # Validar JSON
        data = json.loads(cleaned)
        return json.dumps(data, ensure_ascii=False)
    
    except Exception as e:
        print(f"‚ùå Erro IA: {e}")
        return json.dumps({
            "Marca": marca,
            "Modelo": modelo,
            "Especificacoes": "N√ÉO ENCONTRADO"
        }, ensure_ascii=False)


# --- EXECU√á√ÉO ---
if __name__ == "__main__":
    try:
        df = pd.read_excel(BASE_PRODUTOS, engine='openpyxl')
        df['PESQUISA'] = ''

        for index, row in df.iterrows():
            marca = str(row.get('Marca', ''))
            modelo = str(row.get('Modelo', ''))
            descricao = str(row.get('DESCRICAO', ''))

            resultado = gerar_conteudo(marca, modelo, descricao)
            df.at[index, 'PESQUISA'] = resultado

            print(f"‚úÖ Conclu√≠do: {marca} {modelo}")
            time.sleep(5)
            print("-" * 50)
        


        df.to_excel(OUTPUT_FILE, index=False, engine='openpyxl')
        print(f"\nüéâ Processo conclu√≠do! Arquivo salvo em: {OUTPUT_FILE}")


    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo n√£o encontrado ‚Üí {BASE_PRODUTOS}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
