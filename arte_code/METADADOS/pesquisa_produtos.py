# 1. Importar as bibliotecas necess√°rias
import google.generativeai as genai
import os
from dotenv import load_dotenv
import pandas as pd # Para trabalhar com a tabela de dados

# --- CONFIGURA√á√ÉO INICIAL ---
# Chama a fun√ß√£o para carregar as vari√°veis do arquivo .env
load_dotenv() 

# Configura a chave da API
api_key = os.getenv("GOOGLE_API_KEY") 
genai.configure(api_key=api_key)

# 2. Inicializar o Modelo
# Importante: O Gemini 2.5 flash n√£o existe, o modelo mais pr√≥ximo √© o 1.5. Vamos usar 'gemini-1.5-flash'.
# Para fun√ß√µes de pesquisa, o Gemini 1.5 Pro tamb√©m √© uma excelente escolha.
model = genai.GenerativeModel(model_name='gemini-2.5-flash-lite')

# 3. Caminhos dos arquivos
# Certifique-se de que o caminho est√° correto para o arquivo de entrada
BASE_PRODUTOS = r'sheets/PRODUTOS/base_produtos_master_500.xlsx'
# Define o caminho do arquivo de sa√≠da com a nova coluna
OUTPUT_FILE = r'C:\Users\pietr\OneDrive\.vscode\arte_\sheets\RESULTADO_metadados\prdodutos_master_pesquisa.xlsx'

# 4. A Fun√ß√£o para "Promptar"
def gerar_conteudo(marca, modelo, descricao):
    """
    Esta fun√ß√£o cria um prompt din√¢mico e pede ao modelo para gerar conte√∫do.
    """
    print(f"ü§ñ Pedindo √† IA para pesquisar sobre: {modelo} da marca {marca}...")

    prompt = f"""
    Fa√ßa uma pesquisa na internet de forma ampla e categ√≥rica afim de extrair as principais CARACTER√çSTICAS T√âCNICAS DO PRODUTO: {modelo} da marca: {marca}. 
    Se serve de ajuda, o m√°ximo que sabemos de descri√ß√µes desse produto hoje √©: "{descricao}" (utilize isso como um balizador do seu conhecimento apenas).
    Agora realize a pesquisa e me traga uma descri√ß√£o completa e detalhada do produto, com suas principais especifica√ß√µes t√©cnicas e funcionalidades.
    """

    # 5. Enviando o Prompt e Recebendo a Resposta
    try:
        # A chamada principal que envia seu prompt para a API do Gemini
        # Aqui, estamos usando o modo de gera√ß√£o de conte√∫do para uma resposta mais concisa.
        response = model.generate_content(prompt)
        
        # A resposta da IA est√° no atributo .text
        return response.text
        
    except Exception as e:
        print(f"‚ùå Ocorreu um erro durante a chamada para a IA: {e}")
        return "Erro ao obter a descri√ß√£o."

# --- EXECU√á√ÉO DO C√ìDIGO PRINCIPAL ---
if __name__ == "__main__":
    try:
        # Ler o arquivo Excel usando pandas
        # O motor openpyxl √© necess√°rio para ler arquivos .xlsx
        df = pd.read_excel(BASE_PRODUTOS, engine='openpyxl')
        
        # Cria uma nova coluna para armazenar os resultados da pesquisa
        df['PESQUISA'] = ''

        # Percorre cada linha do DataFrame
        for index, row in df.iterrows():
            marca = row['Marca']
            modelo = row['Modelo']
            descricao = row['DESCRICAO']
            
            # Chama a fun√ß√£o para gerar o conte√∫do com os dados da linha
            resultado_da_ia = gerar_conteudo(marca, modelo, descricao)
            
            # Adiciona o resultado na nova coluna da linha correspondente
            df.loc[index, 'PESQUISA'] = resultado_da_ia
            
            print(f"‚úÖ Pesquisa para '{modelo}' conclu√≠da com sucesso!")
            print("-" * 50)

        # Salva o DataFrame atualizado em um novo arquivo Excel
        df.to_excel(OUTPUT_FILE, index=False, engine='openpyxl')
        
        print("\nüéâ Processo conclu√≠do! O arquivo com as pesquisas foi salvo em:")
        print(OUTPUT_FILE)
        
    except FileNotFoundError:
        print(f"‚ùå Erro: O arquivo n√£o foi encontrado no caminho especificado: {BASE_PRODUTOS}")
    except Exception as e:
        print(f"‚ùå Ocorreu um erro inesperado: {e}")