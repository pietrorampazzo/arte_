import os
from pathlib import Path

def excluir_arquivos_por_extensao(diretorio_raiz, extensoes):
    """
    Exclui arquivos com as extens√µes especificadas dentro de um diret√≥rio
    e de todas as suas subpastas.

    AVISO: Esta opera√ß√£o √© permanente.

    :param diretorio_raiz: O caminho para a pasta principal onde a busca come√ßar√°.
    :param extensoes: Uma lista de extens√µes de arquivo a serem exclu√≠das (ex: ['.txt', '.xlsx']).
    """
    pasta_raiz = Path(diretorio_raiz)
    
    if not pasta_raiz.is_dir():
        print(f"‚ùå ERRO: O diret√≥rio '{diretorio_raiz}' n√£o foi encontrado.")
        return

    print(f"üßπ Iniciando a limpeza no diret√≥rio: {pasta_raiz}")
    print(f"üîé Procurando por arquivos com extens√µes: {', '.join(extensoes)}")

    arquivos_excluidos = 0
    erros = 0

    # Itera por cada extens√£o fornecida
    for ext in extensoes:
        # O m√©todo rglob('*' + ext) encontra todos os arquivos com a extens√£o recursivamente
        for arquivo in pasta_raiz.rglob(f'*{ext}'):
            try:
                arquivo.unlink()  # Exclui o arquivo
                print(f"  üóëÔ∏è Exclu√≠do: {arquivo}")
                arquivos_excluidos += 1
            except Exception as e:
                print(f"  ‚ùå Falha ao excluir {arquivo}: {e}")
                erros += 1
    
    print("\n" + "="*40)
    if arquivos_excluidos == 0 and erros == 0:
        print("‚úÖ Limpeza conclu√≠da. Nenhum arquivo correspondente foi encontrado.")
    else:
        print(f"‚úÖ Limpeza conclu√≠da!")
        print(f"   - Arquivos exclu√≠dos: {arquivos_excluidos}")
        if erros > 0:
            print(f"   - Falhas: {erros}")
    print("="*40)


if __name__ == "__main__":
    # --- CONFIGURA√á√ÉO ---
    # Especifique o diret√≥rio principal aqui
    diretorio_alvo = r"C:\Users\pietr\OneDrive\.vscode\arte_\DOWNLOADS\EDITAIS"
    
    # Especifique as extens√µes dos arquivos a serem exclu√≠dos
    extensoes_alvo = ['.xlsx', '.txt']

    # --- EXECU√á√ÉO ---
    excluir_arquivos_por_extensao(diretorio_alvo, extensoes_alvo)
