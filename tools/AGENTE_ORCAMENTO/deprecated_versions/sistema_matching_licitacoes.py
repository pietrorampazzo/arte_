"""
Sistema Inteligente de Matching de Produtos para Licita√ß√µes
Utilizando TF-IDF, Sentence Transformers e Zero-Shot Classification

Autor: Sistema Automatizado
Data: 2025
"""

import os
import re
import pandas as pd
import numpy as np
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Bibliotecas de NLP
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
from transformers import pipeline
import torch

# Configura√ß√µes
class Config:
    # Caminhos
    PRODUTOS_PATH = r"C:\Users\pietr\OneDrive\√Årea de Trabalho\ARTE\PRODUTOS.xlsx"
    ORCAMENTOS_PATH = r"C:\Users\pietr\OneDrive\√Årea de Trabalho\ARTE\01_EDITAIS\ORCAMENTOS"

    
    # Par√¢metros de matching
    MARGEM_DISPUTA = 0.53  # 53%
    MIN_COMPATIBILIDADE = 80.0
    MAX_SUGESTOES = 5
    
    # Modelos NLP
    SENTENCE_MODEL = 'all-MiniLM-L6-v2'  # Modelo leve e eficiente
    ZERO_SHOT_MODEL = 'facebook/bart-large-mnli'

class TextProcessor:
    """Processador de texto com m√∫ltiplas t√©cnicas de NLP"""
    
    def __init__(self):
        print("üîÑ Inicializando modelos de NLP...")
        
        # Inicializar modelos
        try:
            self.sentence_model = SentenceTransformer(Config.SENTENCE_MODEL)
            self.zero_shot_classifier = pipeline(
                "zero-shot-classification",
                model=Config.ZERO_SHOT_MODEL,
                device=0 if torch.cuda.is_available() else -1
            )
            self.tfidf_vectorizer = TfidfVectorizer(
                max_features=5000,
                stop_words=None,  # Manteremos stop words em portugu√™s
                ngram_range=(1, 3),
                lowercase=True
            )
            print("‚úÖ Modelos NLP carregados com sucesso!")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao carregar modelos: {e}")
            print("üîÑ Usando fallback para modelos b√°sicos...")
            self.sentence_model = None
            self.zero_shot_classifier = None
    
    def normalizar_texto(self, texto):
        """Normaliza√ß√£o avan√ßada de texto"""
        if pd.isna(texto) or texto is None:
            return ""
        
        texto = str(texto).upper()
        
        # Mapeamento de caracteres especiais
        substituicoes = {
            '√Å': 'A', '√Ä': 'A', '√É': 'A', '√Ç': 'A', '√Ñ': 'A',
            '√â': 'E', '√à': 'E', '√ä': 'E', '√ã': 'E',
            '√ç': 'I', '√å': 'I', '√é': 'I', '√è': 'I',
            '√ì': 'O', '√í': 'O', '√ï': 'O', '√î': 'O', '√ñ': 'O',
            '√ö': 'U', '√ô': 'U', '√õ': 'U', '√ú': 'U',
            '√á': 'C', '√ë': 'N'
        }
        
        for k, v in substituicoes.items():
            texto = texto.replace(k, v)
        
        # Limpar caracteres especiais mantendo espa√ßos
        texto = re.sub(r'[^\w\s]', ' ', texto)
        texto = re.sub(r'\s+', ' ', texto).strip()
        
        return texto
    
    def extrair_especificacoes_tecnicas(self, texto):
        """Extrai especifica√ß√µes t√©cnicas do texto"""
        especificacoes = []
        texto_norm = self.normalizar_texto(texto)
        
        # Padr√µes para especifica√ß√µes t√©cnicas
        padroes = [
            r'(\d+)\s*(V|VOLTS?|WATTS?|W|A|AMPERES?)',  # Voltagem/Pot√™ncia
            r'(\d+)\s*(MM|CM|M|METROS?|CENTIMETROS?|MILIMETROS?)',  # Medidas
            r'(\d+)\s*(KG|G|GRAMAS?|QUILOS?)',  # Peso
            r'(\d+)\s*(CORDAS?|TECLAS?|CANAIS?)',  # Especifica√ß√µes musicais
            r'(USB|BLUETOOTH|WIFI|ETHERNET)',  # Conectividade
            r'(LED|LCD|OLED)',  # Display
            r'(MADEIRA|METAL|PLASTICO|ACO|ALUMINIO)',  # Materiais
        ]
        
        for padrao in padroes:
            matches = re.findall(padrao, texto_norm)
            especificacoes.extend([' '.join(match) if isinstance(match, tuple) else match for match in matches])
        
        return list(set(especificacoes))
    
    def calcular_similaridade_tfidf(self, texto1, texto2):
        """Calcula similaridade usando TF-IDF"""
        try:
            textos = [self.normalizar_texto(texto1), self.normalizar_texto(texto2)]
            if not textos[0] or not textos[1]:
                return 0.0
            
            tfidf_matrix = self.tfidf_vectorizer.fit_transform(textos)
            similaridade = cosine_similarity(tfidf_matrix[0:1], tfidf_matrix[1:2])[0][0]
            return float(similaridade * 100)
        except:
            return 0.0
    
    def calcular_similaridade_semantica(self, texto1, texto2):
        """Calcula similaridade sem√¢ntica usando Sentence Transformers"""
        if not self.sentence_model:
            return self.calcular_similaridade_tfidf(texto1, texto2)
        
        try:
            embeddings = self.sentence_model.encode([
                self.normalizar_texto(texto1),
                self.normalizar_texto(texto2)
            ])
            similaridade = cosine_similarity([embeddings[0]], [embeddings[1]])[0][0]
            return float(similaridade * 100)
        except:
            return self.calcular_similaridade_tfidf(texto1, texto2)
    
    def classificar_categoria(self, texto, categorias_candidatas):
        """Classifica texto em categorias usando Zero-Shot"""
        if not self.zero_shot_classifier:
            return categorias_candidatas[0] if categorias_candidatas else "GERAL"
        
        try:
            resultado = self.zero_shot_classifier(texto, categorias_candidatas)
            return resultado['labels'][0]
        except:
            return categorias_candidatas[0] if categorias_candidatas else "GERAL"

class LegalAnalyzer:
    """Analisador jur√≠dico para identificar irregularidades em editais"""
    
    @staticmethod
    def analisar_direcionamento(descricao_edital):
        """Analisa se h√° direcionamento indevido no edital"""
        texto_norm = descricao_edital.upper()
        
        # Padr√µes que indicam poss√≠vel direcionamento
        padroes_direcionamento = [
            r'\bMARCA\s*[:\-]?\s*(\w+)',
            r'\bEXCLUSIVAMENTE\b',
            r'\bAPENAS\s+MARCA\b',
            r'\bSOBRETUDO\s+MARCA\b',
            r'\bUNICAMENTE\b',
            r'\bEXCLUSIVO\b'
        ]
        
        direcionamentos_encontrados = []
        for padrao in padroes_direcionamento:
            matches = re.findall(padrao, texto_norm)
            direcionamentos_encontrados.extend(matches)
        
        tem_direcionamento = len(direcionamentos_encontrados) > 0
        
        if tem_direcionamento:
            return {
                'exige_impugnacao': True,
                'observacao': 'Poss√≠vel direcionamento identificado. Exig√™ncia de marca espec√≠fica sem justificativa t√©cnica adequada. Fundamentado na Lei 14.133/21 (art. 7¬∫ ¬ß5¬∫) para garantir isonomia, impessoalidade, economicidade e competitividade.',
                'direcionamentos': direcionamentos_encontrados
            }
        else:
            return {
                'exige_impugnacao': False,
                'observacao': 'Especifica√ß√£o t√©cnica adequada. Permite competi√ß√£o entre fornecedores equivalentes.',
                'direcionamentos': []
            }

class ProductMatcher:
    """Sistema principal de matching de produtos"""
    
    def __init__(self):
        self.text_processor = TextProcessor()
        self.legal_analyzer = LegalAnalyzer()
        self.produtos_df = None
        self.resultados = []
    
    def carregar_dados(self):
        """Carrega dados dos produtos e editais"""
        print("üìÇ Carregando dados...")
        
        try:
            # Carregar produtos
            self.produtos_df = pd.read_excel(Config.PRODUTOS_PATH)
            self.produtos_df.columns = self.produtos_df.columns.str.strip()
            print(f"‚úÖ {len(self.produtos_df)} produtos carregados")
            
            # Listar arquivos de or√ßamentos
            orcamentos_path = Path(Config.ORCAMENTOS_PATH)
            self.arquivos_orcamento = list(orcamentos_path.glob("*.xlsx"))
            print(f"‚úÖ {len(self.arquivos_orcamento)} arquivos de or√ßamento encontrados")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro ao carregar dados: {e}")
            return False
    
    def extrair_valor_numerico(self, valor):
        """Extrai valor num√©rico de string"""
        if pd.isna(valor):
            return 0.0
        
        valor_str = str(valor).replace('.', '').replace(',', '.')
        try:
            match = re.search(r'[\d\.]+', valor_str)
            return float(match.group()) if match else 0.0
        except:
            return 0.0
    
    def calcular_score_hibrido(self, desc_edital, produto):
        """Calcula score h√≠brido combinando m√∫ltiplas t√©cnicas"""
        # Preparar textos
        texto_edital = desc_edital
        texto_produto = f"{produto.get('MODELO', '')} {produto.get('DESCRI√á√ÉO', '')} {produto.get('DESCRICAO', '')}"
        
        # 1. Similaridade TF-IDF (peso: 30%)
        score_tfidf = self.text_processor.calcular_similaridade_tfidf(texto_edital, texto_produto)
        
        # 2. Similaridade Sem√¢ntica (peso: 50%)
        score_semantico = self.text_processor.calcular_similaridade_semantica(texto_edital, texto_produto)
        
        # 3. Match exato de modelo (peso: 20%)
        modelo = str(produto.get('MODELO', ''))
        score_exato = 100.0 if modelo and modelo.upper() in texto_edital.upper() else 0.0
        
        # 4. Especifica√ß√µes t√©cnicas (b√¥nus)
        specs_edital = self.text_processor.extrair_especificacoes_tecnicas(texto_edital)
        specs_produto = self.text_processor.extrair_especificacoes_tecnicas(texto_produto)
        
        bonus_specs = 0.0
        if specs_edital and specs_produto:
            specs_match = len(set(specs_edital) & set(specs_produto))
            bonus_specs = (specs_match / len(specs_edital)) * 10 if specs_edital else 0
        
        # Score final h√≠brido
        score_final = (
            score_tfidf * 0.3 +
            score_semantico * 0.5 +
            score_exato * 0.2 +
            bonus_specs
        )
        
        return min(score_final, 100.0), {
            'tfidf': score_tfidf,
            'semantico': score_semantico,
            'exato': score_exato,
            'specs_bonus': bonus_specs,
            'specs_edital': specs_edital,
            'specs_produto': specs_produto
        }
    
    def processar_matching(self):
        """Processa matching para todos os arquivos"""
        if not self.carregar_dados():
            return False
        
        print("üîç Iniciando processo de matching...")
        
        for arquivo in self.arquivos_orcamento:
            print(f"üìÑ Processando: {arquivo.name}")
            
            try:
                df_edital = pd.read_excel(arquivo)
                
                for _, item in df_edital.iterrows():
                    self.processar_item_edital(item, arquivo.name)
                    
            except Exception as e:
                print(f"‚ùå Erro ao processar {arquivo.name}: {e}")
                continue
        
        print(f"‚úÖ Matching conclu√≠do! {len(self.resultados)} matches encontrados")
        return True
    
    def processar_item_edital(self, item, nome_arquivo):
        """Processa um item espec√≠fico do edital"""
        # Extrair dados do item
        num_item = item.get('N√∫mero do Item', 'N/A')
        desc_edital = str(item.get('Item', ''))
        unidade = item.get('Unidade de Fornecimento', 'UN')
        qtd = float(item.get('Quantidade Total', 0))
        valor_ref = self.extrair_valor_numerico(item.get('Valor Unit√°rio (R$)', 0))
        
        if not desc_edital or valor_ref <= 0:
            return
        
        # An√°lise jur√≠dica
        analise_juridica = self.legal_analyzer.analisar_direcionamento(desc_edital)
        
        # Buscar matches nos produtos
        matches_encontrados = []
        
        for _, produto in self.produtos_df.iterrows():
            score, detalhes = self.calcular_score_hibrido(desc_edital, produto)
            
            if score >= Config.MIN_COMPATIBILIDADE:
                valor_produto = self.extrair_valor_numerico(produto.get('Valor', produto.get('VALOR', 0)))
                valor_disputa = valor_produto * (1 + Config.MARGEM_DISPUTA)
                
                # Verificar se est√° dentro do or√ßamento
                if valor_disputa <= valor_ref:
                    matches_encontrados.append({
                        'produto': produto,
                        'score': score,
                        'detalhes': detalhes,
                        'valor_produto': valor_produto,
                        'valor_disputa': valor_disputa
                    })
        
        # Ordenar por score e pre√ßo
        matches_encontrados.sort(key=lambda x: (-x['score'], x['valor_disputa']))
        
        # Selecionar top matches
        for match in matches_encontrados[:Config.MAX_SUGESTOES]:
            self.adicionar_resultado(
                num_item, desc_edital, unidade, qtd, valor_ref,
                match, analise_juridica, nome_arquivo
            )
    
    def adicionar_resultado(self, num_item, desc_edital, unidade, qtd, valor_ref, match, analise_juridica, arquivo):
        """Adiciona resultado √† lista final"""
        produto = match['produto']
        score = match['score']
        detalhes = match['detalhes']
        valor_produto = match['valor_produto']
        valor_disputa = match['valor_disputa']
        
        # Preparar compara√ß√£o t√©cnica
        comparacao_tecnica = f"Compatibilidade: {score:.1f}% | "
        comparacao_tecnica += f"TF-IDF: {detalhes['tfidf']:.1f}% | "
        comparacao_tecnica += f"Sem√¢ntico: {detalhes['semantico']:.1f}% | "
        if detalhes['specs_edital']:
            comparacao_tecnica += f"Specs: {', '.join(detalhes['specs_edital'][:3])}"
        
        # Determinar se pode substituir
        pode_substituir = "Sim" if score >= 90 else "Parcialmente"
        
        resultado = {
            'Arquivo': arquivo,
            'Item': num_item,
            'Descri√ß√£o Edital': desc_edital,
            'Unidade': unidade,
            'Quantidade': qtd,
            'Valor Ref. Unit√°rio': valor_ref,
            'Valor Ref. Total': valor_ref * qtd,
            'Marca sugerida': produto.get('MARCA', produto.get('Marca', 'N/A')),
            'Produto Sugerido': produto.get('MODELO', produto.get('DESCRICAO', 'N/A')),
            'Link/C√≥digo': f"{produto.get('MARCA', 'N/A')}_{produto.get('MODELO', 'N/A')}",
            'Pre√ßo Fornecedor': valor_produto,
            'Pre√ßo com Margem 53%': valor_disputa,
            'Compara√ß√£o T√©cnica': comparacao_tecnica,
            '% Compatibilidade': round(score, 2),
            'Pode Substituir?': pode_substituir,
            'Exige Impugna√ß√£o?': 'Sim' if analise_juridica['exige_impugnacao'] else 'N√£o',
            'Observa√ß√£o Jur√≠dica': analise_juridica['observacao'],
            'Fornecedor': produto.get('FORNECEDOR', 'N/A')
        }
        
        self.resultados.append(resultado)
    
    def gerar_relatorios(self):
        """Gera relat√≥rios em m√∫ltiplos formatos"""
        if not self.resultados:
            print("‚ùå Nenhum resultado para gerar relat√≥rios")
            return False
        
        print("üìä Gerando relat√≥rios...")
        
        # Criar DataFrame
        df_final = pd.DataFrame(self.resultados)
        
        # Calcular estat√≠sticas
        total_items = df_final['Item'].nunique()
        matches_validos = len(df_final[df_final['% Compatibilidade'] >= 90])
        
        # Calcular economia
        economia_por_item = (df_final['Valor Ref. Unit√°rio'] - df_final['Pre√ßo com Margem 53%']) * df_final['Quantidade']
        economia_total = economia_por_item[economia_por_item > 0].sum()
        
        # Salvar arquivos na pasta de or√ßamentos
        pasta_saida = Path(Config.ORCAMENTOS_PATH)
        
        # 1. CSV principal
        arquivo_csv = pasta_saida / "RESULTADO_MATCHING_INTELIGENTE.csv"
        df_final.to_csv(arquivo_csv, index=False, encoding='utf-8-sig')
        
        # 2. Excel com m√∫ltiplas abas
        arquivo_excel = pasta_saida / "RELATORIO_MATCHING_COMPLETO.xlsx"
        with pd.ExcelWriter(arquivo_excel, engine='openpyxl') as writer:
            df_final.to_excel(writer, sheet_name='Matches Completos', index=False)
            
            # Aba de resumo por arquivo
            resumo_arquivos = df_final.groupby('Arquivo').agg({
                'Item': 'nunique',
                '% Compatibilidade': 'mean',
                'Pre√ßo com Margem 53%': 'sum',
                'Valor Ref. Total': 'sum'
            }).round(2)
            resumo_arquivos.to_excel(writer, sheet_name='Resumo por Arquivo')
            
            # Aba de melhores matches
            melhores_matches = df_final[df_final['% Compatibilidade'] >= 95].copy()
            melhores_matches.to_excel(writer, sheet_name='Melhores Matches', index=False)
        
        # 3. Relat√≥rio em Markdown
        self.gerar_relatorio_markdown(df_final, total_items, matches_validos, economia_total)
        
        print(f"‚úÖ Relat√≥rios gerados com sucesso!")
        print(f"   üìÅ Pasta: {pasta_saida}")
        print(f"   üìÑ CSV: RESULTADO_MATCHING_INTELIGENTE.csv")
        print(f"   üìä Excel: RELATORIO_MATCHING_COMPLETO.xlsx")
        print(f"   üìù Markdown: RELATORIO_MATCHING_DETALHADO.md")
        print(f"   üí∞ Economia estimada: R$ {economia_total:,.2f}")
        
        return True
    
    def gerar_relatorio_markdown(self, df_final, total_items, matches_validos, economia_total):
        """Gera relat√≥rio detalhado em Markdown"""
        pasta_saida = Path(Config.ORCAMENTOS_PATH)
        arquivo_md = pasta_saida / "RELATORIO_MATCHING_DETALHADO.md"
        
        # Estat√≠sticas por compatibilidade
        stats_compat = df_final.groupby(pd.cut(df_final['% Compatibilidade'], 
                                              bins=[0, 80, 90, 95, 100], 
                                              labels=['80-89%', '90-94%', '95-99%', '100%'])).size()
        
        conteudo = f"""# üéØ Relat√≥rio Inteligente de Matching de Produtos para Licita√ß√µes

## üìà Resumo Executivo

- **Total de Itens Analisados**: {total_items}
- **Matches V√°lidos Encontrados**: {matches_validos}
- **Taxa de Sucesso**: {(matches_validos/len(df_final)*100):.1f}%
- **Economia Estimada Total**: R$ {economia_total:,.2f}
- **Tecnologia Utilizada**: TF-IDF + Sentence Transformers + Zero-Shot Classification

## üîç Distribui√ß√£o de Compatibilidade

{stats_compat.to_string()}

## ‚öñÔ∏è An√°lise Jur√≠dica

- **Itens com Exig√™ncia de Impugna√ß√£o**: {len(df_final[df_final['Exige Impugna√ß√£o?'] == 'Sim'])}
- **Itens Conformes**: {len(df_final[df_final['Exige Impugna√ß√£o?'] == 'N√£o'])}

## üèÜ Top 10 Melhores Matches

{df_final.nlargest(10, '% Compatibilidade')[['Item', 'Produto Sugerido', '% Compatibilidade', 'Pre√ßo com Margem 53%']].to_string(index=False)}

## üí° Metodologia Aplicada

Este relat√≥rio foi gerado utilizando t√©cnicas avan√ßadas de Processamento de Linguagem Natural:

1. **TF-IDF (Term Frequency-Inverse Document Frequency)**: An√°lise estat√≠stica de relev√¢ncia de termos
2. **Sentence Transformers**: Embeddings sem√¢nticos para compreens√£o contextual
3. **Zero-Shot Classification**: Categoriza√ß√£o autom√°tica sem treinamento espec√≠fico
4. **An√°lise Jur√≠dica Automatizada**: Identifica√ß√£o de direcionamentos indevidos

## üìã Conformidade Legal

An√°lise baseada na Lei 14.133/21, garantindo:
- ‚úÖ Isonomia entre fornecedores
- ‚úÖ Impessoalidade na an√°lise t√©cnica  
- ‚úÖ Economicidade na sele√ß√£o
- ‚úÖ Competitividade no processo

---

*Relat√≥rio gerado automaticamente pelo Sistema Inteligente de Matching*
*Data: {pd.Timestamp.now().strftime('%d/%m/%Y %H:%M')}*
"""
        
        with open(arquivo_md, 'w', encoding='utf-8') as f:
            f.write(conteudo)

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Sistema Inteligente de Matching de Produtos para Licita√ß√µes")
    print("=" * 60)
    
    # Inicializar sistema
    matcher = ProductMatcher()
    
    # Executar processo completo
    if matcher.processar_matching():
        if matcher.gerar_relatorios():
            print("\nüéâ Processo conclu√≠do com sucesso!")
            print("üìÅ Verifique os arquivos gerados na pasta de or√ßamentos")
        else:
            print("\n‚ùå Erro na gera√ß√£o de relat√≥rios")
    else:
        print("\n‚ùå Erro no processo de matching")

if __name__ == "__main__":
    main()

