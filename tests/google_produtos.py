# pesquisa_produtos_revisado.py

import google.generativeai as genai
import os
from dotenv import load_dotenv
import pandas as pd
import json
import time

# --- CONFIGURA√á√ÉO INICIAL ---
load_dotenv()
api_key = os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=api_key)

# Modelo de IA
model = genai.GenerativeModel(model_name='gemini-2.5-flash-lite')

# Caminhos dos arquivos
BASE_PRODUTOS = r'sheets/PRODUTOS/produtos_teste.xlsx'
OUTPUT_FILE = r'C:\Users\pietr\OneDrive\.vscode\arte_\sheets\RESULTADO_metadados\produtos_master_pesquisa_tecnico_v3.xlsx'


# Fun√ß√£o para gerar conte√∫do t√©cnico
def gerar_conteudo(marca, modelo, descricao):
    """
    Gera uma descri√ß√£o t√©cnica concisa para um produto, focando em especifica√ß√µes confirmadas.
    """
    print(f"üîé Pesquisando: {marca} {modelo}...")

    prompt = f"""
Voc√™ √© um especialista em cataloga√ß√£o de produtos musicais e de √°udio.
Sua tarefa √© criar uma descri√ß√£o t√©cnica para o produto abaixo, listando APENAS as especifica√ß√µes mais relevantes e confirmadas.
D√™ um google no produto usando as informa√ß√µes do produto para analise, priorize o site do fabricante ou de algum revendedor confiavel, para captar as informa√ß√µes reais do produto.
Seu trabalho √© fazer uma curadoria digital sobre os produtos, e buscar extid√£o nas informa√ß√µes.

**Produto para An√°lise:**
- **Marca:** {marca}
- **Modelo:** {modelo}
- **Descri√ß√£o Conhecida:** "{descricao}"

**Regras Essenciais:**
1.  **Foco Total em Dados:** Liste apenas especifica√ß√µes t√©cnicas concretas e verific√°veis (ex: material, dimens√µes, tipo de conex√£o, resposta de frequ√™ncia, etc.).
2.  **Sem "Enche√ß√£o":** N√ÉO inclua opini√µes, marketing, frases vagas ou coment√°rios.
3.  **Omiss√£o √© Chave:** Se voc√™ n√£o encontrar uma informa√ß√£o com alta certeza, **simplesmente n√£o a mencione**. N√£o escreva "n√£o encontrado", "desconhecido" ou "N/A". A aus√™ncia da informa√ß√£o √© prefer√≠vel.
4.  **Formato Limpo:** Apresente as especifica√ß√µes como uma lista de caracter√≠sticas separadas por v√≠rgulas.
5.  **Relev√¢ncia:** Forne√ßa apenas especifica√ß√µes que fazem sentido para o tipo de produto. 

**Exemplo (Viol√£o):**
Tampo em Spruce, laterais e fundo em Mogno, escala em Rosewood, 20 trastes, tarraxas cromadas.

**Exemplo (Microfone):**
Tipo Condensador, Padr√£o Polar Cardioide, Resposta de Frequ√™ncia 20Hz-20kHz, Conex√£o XLR.

**Descri√ß√£o T√©cnica Concisa:**
"""

    try:
        response = model.generate_content(prompt)
        # Limpa a resposta, removendo markdown e espa√ßos extras.
        cleaned_response = response.text.strip()
        if not cleaned_response or len(cleaned_response) < 10: # Heur√≠stica para resposta vazia/in√∫til
             return "Nenhuma especifica√ß√£o t√©cnica relevante encontrada."
        return cleaned_response
    
    except Exception as e:
        print(f"‚ùå Erro na chamada da IA: {e}")
        return "Erro ao pesquisar especifica√ß√µes."


# --- EXECU√á√ÉO ---
if __name__ == "__main__":
    try:
        df = pd.read_excel(BASE_PRODUTOS, engine='openpyxl')
        df['PESQUISA'] = ''

        for index, row in df.iterrows():
            marca = str(row.get('Marca', ''))
            modelo = str(row.get('Modelo', ''))
            descricao = str(row.get('DESCRICAO', ''))

            resultado = gerar_conteudo(marca, modelo, descricao)
            df.at[index, 'PESQUISA'] = resultado

            print(f"‚úÖ Conclu√≠do: {marca} {modelo}")
            time.sleep(5)
            print("-" * 50)
        


        df.to_excel(OUTPUT_FILE, index=False, engine='openpyxl')
        print(f"\nüéâ Processo conclu√≠do! Arquivo salvo em: {OUTPUT_FILE}")


    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo n√£o encontrado ‚Üí {BASE_PRODUTOS}")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
