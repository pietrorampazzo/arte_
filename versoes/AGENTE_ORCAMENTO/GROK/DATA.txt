https://console.groq.com/docs/overview
https://jina.ai/models/jina-embeddings-v4


GROK 
GROQ_API_KEY = arte_key = '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'

Chat Completions
Model	Requests per Minute	Requests per Day	Tokens per Minute	Tokens per Day	Actions
qwen/qwen3-32b	60	1K	5K / 6K	500K

from groq import Groq

curl -X POST https://api.groq.com/openai/v1/chat/completions \
-H "Authorization: Bearer $GROQ_API_KEY" \
-H "Content-Type: application/json" \
-d '{
"model": "llama-3.3-70b-versatile",
"messages": [{
    "role": "user",
    "content": "Explain the importance of fast language models"
}]
}'

client = Groq()
completion = client.chat.completions.create(
    model="meta-llama/llama-4-scout-17b-16e-instruct",
    messages=[
      {
        "role": "user",
        "content": "Você é um especialista em instrumentos musicais e equipamentos de áudio para licitações públicas.\n\nTAREFA: Analise cada descrição de produto e extraia metadados técnicos em formato JSON.\n\nCATEGORIAS PRINCIPAIS:\n- INSTRUMENTO_SOPRO_METAL (trompete, bombardino, trombone, tuba, sousafone)\n- INSTRUMENTO_SOPRO_MADEIRA (clarinete, saxofone, flauta, oboé)\n- INSTRUMENTO_PERCUSSAO_PELE (bumbo, surdo, tarol, caixa clara, tambor)\n- INSTRUMENTO_PERCUSSAO_METAL (prato, triângulo, carrilhão, sino)\n- INSTRUMENTO_CORDA (violino, viola, violão, guitarra, baixo)\n- ACESSORIO_SOPRO (bocal, boquilha, palheta, estante)\n- ACESSORIO_PERCUSSAO (baqueta, talabarte, pele, esteira)\n- ACESSORIO_CORDA (corda, arco, cavalete)\n- EQUIPAMENTO_SOM (caixa de som, amplificador, mesa de som)\n- EQUIPAMENTO_AUDIO (microfone, cabo, conector)\n- OUTROS (produtos não identificados)\n\nCAMPOS JSON OBRIGATÓRIOS:\n- categoria_principal: uma das categorias acima\n- subcategoria: tipo específico (ex: TROMPETE, CAIXA_ATIVA, BAQUETA)\n- afinacao: afinação musical (ex: Bb, Eb, F) ou null\n- dimensao: medidas principais (ex: \"15 polegadas\", \"20x30 cm\") ou null\n- material: material principal (ex: bronze, madeira, plástico) ou null\n- potencia: potência elétrica (ex: \"400W RMS\") ou null\n- marca: marca identificada ou null\n- modelo: modelo identificado ou null\n- especificacoes_extras: dict com specs adicionais ou {}\n\nFORMATO DE RESPOSTA:\nRetorne APENAS um array JSON válido, sem texto adicional:\n[\n  {\"categoria_principal\": \"...\", \"subcategoria\": \"...\", ...},\n  {\"categoria_principal\": \"...\", \"subcategoria\": \"...\", ...}\n]\n\nDESCRIÇÕES PARA ANÁLISE:"
      },
      {
        "role": "assistant",
        "content": "   Analise esta descrição de item de licitação e extraia metadados em JSON:\n\n    ITEM: \"{texto_consulta}\"\n\n    Extraia:\n    - categoria_principal: INSTRUMENTO_SOPRO_METAL, INSTRUMENTO_PERCUSSAO_PELE, EQUIPAMENTO_SOM, etc.\n    - subcategoria: tipo específico (TROMPETE, BUMBO, CAIXA_ATIVA, etc.)\n    - afinacao: afinação musical (Bb, Eb, F) ou null\n    - dimensao: medidas (ex: \"15 polegadas\", \"20x30 cm\") ou null\n    - material: material principal ou null\n    - potencia: potência elétrica ou null\n    - especificacoes_chave: lista de specs importantes\n\n    Responda APENAS com JSON válido:\n    {{\"categoria_principal\": \"...\", \"subcategoria\": \"...\", ...}}"
      }
    ],
    temperature=1,
    max_completion_tokens=1024,
    top_p=1,
    stream=True,
    stop=None,
)

for chunk in completion:
    print(chunk.choices[0].delta.content or "", end="")


JINA
JINA_API_KEY = 'jina_64f56d5dfa26445e8d10ebcec8897233YCgLfgNjODz8G8__hQ_u67Urx3dI'

curl "https://r.jina.ai/" \
  -H "Accept: text/event-stream" \
  -H "Authorization: Bearer jina_64f56d5dfa26445e8d10ebcec8897233YCgLfgNjODz8G8__hQ_u67Urx3dI" \
  -H "Content-Type: application/json" \
  -H "X-Respond-With: readerlm-v2" \
  -H "X-Token-Budget: 200000" \
  -d @- <<EOFEOF
  {
    "url": "https://example.com",
    "instruction": "Você é um especialista em instrumentos musicais e equipamentos de áudio para licitações públicas.\n\nTAREFA: Analise cada descrição de produto e extraia metadados técnicos em formato JSON.\n\nCATEGORIAS PRINCIPAIS:\n- INSTRUMENTO_SOPRO_METAL (trompete, bombardino, trombone, tuba, sousafone)\n- INSTRUMENTO_SOPRO_MADEIRA (clarinete, saxofone, flauta, oboé)\n- INSTRUMENTO_PERCUSSAO_PELE (bumbo, surdo, tarol, caixa clara, tambor)\n- INSTRUMENTO_PERCUSSAO_METAL (prato, triângulo, carrilhão, sino)\n- INSTRUMENTO_CORDA (violino, viola, violão, guitarra, baixo)\n- ACESSORIO_SOPRO (bocal, boquilha, palheta, estante)\n- ACESSORIO_PERCUSSAO (baqueta, talabarte, pele, esteira)\n- ACESSORIO_CORDA (corda, arco, cavalete)\n- EQUIPAMENTO_SOM (caixa de som, amplificador, mesa de som)\n- EQUIPAMENTO_AUDIO (microfone, cabo, conector)\n- OUTROS (produtos não identificados)\n\nCAMPOS JSON OBRIGATÓRIOS:\n- categoria_principal: uma das categorias acima\n- subcategoria: tipo específico (ex: TROMPETE, CAIXA_ATIVA, BAQUETA)\n- afinacao: afinação musical (ex: Bb, Eb, F) ou null\n- dimensao: medidas principais (ex: \"15 polegadas\", \"20x30 cm\") ou null\n- material: material principal (ex: bronze, madeira, plástico) ou null\n- potencia: potência elétrica (ex: \"400W RMS\") ou null\n- marca: marca identificada ou null\n- modelo: modelo identificado ou null\n- especificacoes_extras: dict com specs adicionais ou {}\n\nFORMATO DE RESPOSTA:\nRetorne APENAS um array JSON válido, sem texto adicional:\n[\n  {\"categoria_principal\": \"...\", \"subcategoria\": \"...\", ...},\n  {\"categoria_principal\": \"...\", \"subcategoria\": \"...\", ...}\n]"
  }
EOFEOF

