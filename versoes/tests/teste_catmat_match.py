#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéØ SISTEMA DE MATCHING BASEADO NO MODELO CATMAT
Vers√£o Especializada para Licita√ß√µes Governamentais

BASEADO NO CATMAT (Cat√°logo de Materiais do Governo Federal):
- Estrutura padronizada de especifica√ß√µes t√©cnicas
- Caracter√≠sticas organizadas por categorias
- C√≥digos NCM/NBS para classifica√ß√£o fiscal
- Unidades de medida padronizadas
- Aplica√ß√£o de margem de prefer√™ncia

FUNCIONALIDADES:
- Parsing de especifica√ß√µes no formato CATMAT
- Matching por categoria e caracter√≠sticas t√©cnicas
- An√°lise de margem de prefer√™ncia nacional
- Compatibilidade com editais governamentais
- Relat√≥rios espec√≠ficos para licita√ß√µes

Autor: Sistema CATMAT
Data: Janeiro 2025
"""

import os
import re
import json
import pandas as pd
import numpy as np
from pathlib import Path
import warnings
from datetime import datetime
warnings.filterwarnings('ignore')
from transformers import AutoTokenizer, AutoModel
import torch

# Importa√ß√µes opcionais
try:
    from transformers import pipeline
    TRANSFORMERS_AVAILABLE = True
    print("‚úÖ Transformers dispon√≠vel")
except ImportError:
    TRANSFORMERS_AVAILABLE = False
    print("‚ö†Ô∏è Transformers n√£o dispon√≠vel - usando an√°lise b√°sica")

class ConfigCATMAT:
    """Configura√ß√µes baseadas no modelo CATMAT"""
    
    # üîß CAMINHOS DOS ARQUIVOS
    PRODUTOS_PATH = r"C:\Users\pietr\OneDrive\√Årea de Trabalho\ARTE\PRODUTOS.xlsx"
    ORCAMENTOS_PATH = r"C:\Users\pietr\OneDrive\√Årea de Trabalho\ARTE\01_EDITAIS\ORCAMENTOS"
    CATMAT_JSON_PATH = r"C:\Users\pietr\OneDrive\√Årea de Trabalho\ARTE\gov_reges.json"  # Opcional
    
    # Par√¢metros espec√≠ficos para licita√ß√µes
    MARGEM_DISPUTA = 0.53  # 53%
    MARGEM_PREFERENCIA_NACIONAL = 0.08  # 8% para produtos nacionais
    MIN_COMPATIBILIDADE = 85.0  # Rigoroso para licita√ß√µes
    MIN_COMPATIBILIDADE_CATEGORIA = 90.0  # Categoria deve ser muito precisa
    MIN_COMPATIBILIDADE_CARACTERISTICAS = 75.0  # Caracter√≠sticas t√©cnicas
    MAX_SUGESTOES = 3
    
    # Configura√ß√µes do pipeline
    MODELO_PIPELINE = "sentence-transformers/all-MiniLM-L6-v2"

class ProcessadorCATMAT:
    """Processador especializado no formato CATMAT"""
    
    def __init__(self):
        print("üîÑ Inicializando processador contextual...")

        self.pipeline_embeddings = None

        if TRANSFORMERS_AVAILABLE:
            try:
                print("üì• Carregando modelo para an√°lise contextual (com truncation)...")
                self.pipeline_embeddings = pipeline(
                    "feature-extraction",
                    model=AutoModel.from_pretrained("sentence-transformers/all-MiniLM-L6-v2"),
                    tokenizer=AutoTokenizer.from_pretrained("sentence-transformers/all-MiniLM-L6-v2"),
                    truncation=True,
                    max_length=512,
                    return_tensors="np"
                )
                print("‚úÖ Pipeline contextual inicializado com truncamento")
            except Exception as e:
                print("‚ö†Ô∏è Erro ao carregar pipeline: " + str(e))
                self.pipeline_embeddings = None
    
    def carregar_catmat(self):
        """Carrega dados do CATMAT para refer√™ncia"""
        try:
            if os.path.exists(ConfigCATMAT.CATMAT_JSON_PATH):
                with open(ConfigCATMAT.CATMAT_JSON_PATH, 'r', encoding='utf-8') as f:
                    self.catmat_data = json.load(f)
                print("‚úÖ Dados CATMAT carregados: " + str(len(self.catmat_data)) + " itens")
            else:
                print("‚ö†Ô∏è Arquivo CATMAT n√£o encontrado - usando an√°lise padr√£o")
        except Exception as e:
            print("‚ö†Ô∏è Erro ao carregar CATMAT: " + str(e))
    
    def normalizar_texto_catmat(self, texto):
        """Normaliza√ß√£o espec√≠fica para padr√£o CATMAT"""
        if pd.isna(texto) or not texto:
            return ""
        
        texto = str(texto).upper()
        
        # Remover acentos mantendo estrutura CATMAT
        acentos = {
            '√Å': 'A', '√Ä': 'A', '√É': 'A', '√Ç': 'A', '√Ñ': 'A',
            '√â': 'E', '√à': 'E', '√ä': 'E', '√ã': 'E',
            '√ç': 'I', '√å': 'I', '√é': 'I', '√è': 'I',
            '√ì': 'O', '√í': 'O', '√ï': 'O', '√î': 'O', '√ñ': 'O',
            '√ö': 'U', '√ô': 'U', '√õ': 'U', '√ú': 'U',
            '√á': 'C', '√ë': 'N'
        }
        
        for k, v in acentos.items():
            texto = texto.replace(k, v)
        
        # Preservar estrutura de caracter√≠sticas CATMAT
        texto = re.sub(r'[^\w\s\-\+\(\)\[\]:,/]', ' ', texto)
        texto = re.sub(r'\s+', ' ', texto).strip()
        
        return texto
    
    def extrair_categoria_catmat(self, texto):
        """Extrai categoria principal no formato CATMAT"""
        texto_norm = self.normalizar_texto_catmat(texto)
        
        # Categorias baseadas no CATMAT analisado
        categorias_catmat = {
            # Instrumentos Musicais
            'AMPLIFICADOR_SOM': ['AMPLIFICADOR', 'AMPLIFIER'],
            'MICROFONE': ['MICROFONE', 'MICROPHONE'],
            'PIANO': ['PIANO', 'TECLADO', 'KEYBOARD'],
            'ESTANTE_PARTITURA': ['ESTANTE', 'PARTITURA', 'MUSIC_STAND'],
            'INSTRUMENTO_PERCUSSAO': ['PERCUSSAO', 'PERCUSSION', 'BATERIA', 'TAMBOR', 'PANDEIRO', 'TRIANGULO', 'PRATO', 'SURDO', 'CAJON'],
            'INSTRUMENTO_SOPRO': ['SOPRO', 'WIND', 'FLAUTA', 'SAXOFONE', 'TROMPETE', 'TROMBONE', 'CLARINETE', 'BOMBARDINO'],
            'INSTRUMENTO_CORDA': ['CORDA', 'STRING', 'VIOLAO', 'GUITARRA', 'BAIXO', 'VIOLINO', 'VIOLA'],
            'PECAS_ACESSORIOS': ['PECAS', 'ACESSORIOS', 'ENCORDOAMENTO', 'PELE', 'PALHETA', 'BOQUILHA'],
            'MESA_AUDIO': ['MESA', 'AUDIO', 'MIXER', 'SWITCHER'],
            'CAIXA_SOM': ['CAIXA', 'SOM', 'SPEAKER', 'ALTO_FALANTE'],
            
            # Equipamentos de TI
            'CONECTOR_CABO': ['CONECTOR', 'CABO', 'RJ45', 'CONNECTOR'],
            'CABO_REDE': ['CABO', 'REDE', 'NETWORK', 'UTP'],
            
            # Outros
            'MATERIAL_CONSUMO': ['MATERIAL', 'CONSUMO'],
            'EQUIPAMENTO_ELETRONICO': ['EQUIPAMENTO', 'ELETRONICO', 'ELECTRONIC']
        }
        
        categorias_encontradas = []
        for categoria, palavras_chave in categorias_catmat.items():
            for palavra in palavras_chave:
                if palavra in texto_norm:
                    categorias_encontradas.append(categoria)
                    break
        
        return list(set(categorias_encontradas))
    
    def extrair_caracteristicas_catmat(self, texto):
        """Extrai caracter√≠sticas no formato CATMAT (#Caracter√≠stica: Valor)"""
        caracteristicas = {}
        texto_norm = self.normalizar_texto_catmat(texto)
        
        # Padr√µes espec√≠ficos do CATMAT
        padroes_catmat = {
            'TIPO': [
                r'TIPO\s*:?\s*([^,|#]+)',
                r'#TIPO\s*:\s*([^|]+)'
            ],
            'MATERIAL': [
                r'MATERIAL\s*:?\s*([^,|#]+)',
                r'#MATERIAL\s*:\s*([^|]+)'
            ],
            'TAMANHO': [
                r'TAMANHO\s*:?\s*([^,|#]+)',
                r'#TAMANHO\s*:\s*([^|]+)',
                r'(\d+)\s*(CM|MM|M|POL|POLEGADAS?)'
            ],
            'POTENCIA': [
                r'POTENCIA\s*:?\s*([^,|#]+)',
                r'#POTENCIA\s*:\s*([^|]+)',
                r'(\d+)\s*(W|WATTS?)'
            ],
            'TENSAO': [
                r'TENSAO\s*:?\s*([^,|#]+)',
                r'#TENSAO\s*:\s*([^|]+)',
                r'(\d+)\s*(V|VOLTS?)'
            ],
            'FREQUENCIA': [
                r'FREQUENCIA\s*:?\s*([^,|#]+)',
                r'#FREQUENCIA\s*:\s*([^|]+)',
                r'(\d+)\s*(HZ|KHZ|MHZ)'
            ],
            'QUANTIDADE': [
                r'QUANTIDADE\s*:?\s*([^,|#]+)',
                r'#QUANTIDADE\s*:\s*([^|]+)',
                r'(\d+)\s*(UN|UNIDADES?|PECAS?)'
            ],
            'ACABAMENTO': [
                r'ACABAMENTO\s*:?\s*([^,|#]+)',
                r'#ACABAMENTO\s*:\s*([^|]+)'
            ],
            'COR': [
                r'COR\s*:?\s*([^,|#]+)',
                r'#COR\s*:\s*([^|]+)'
            ],
            'APLICACAO': [
                r'APLICACAO\s*:?\s*([^,|#]+)',
                r'#APLICACAO\s*:\s*([^|]+)'
            ],
            'COMPONENTES': [
                r'COMPONENTES\s*:?\s*([^,|#]+)',
                r'#COMPONENTES\s*:\s*([^|]+)'
            ],
            'CARACTERISTICAS_ADICIONAIS': [
                r'CARACTERISTICAS\s+ADICIONAIS\s*:?\s*([^,|#]+)',
                r'#CARACTERISTICAS\s+ADICIONAIS\s*:\s*([^|]+)'
            ]
        }
        
        for categoria, padroes in padroes_catmat.items():
            valores_encontrados = []
            for padrao in padroes:
                matches = re.findall(padrao, texto_norm)
                for match in matches:
                    if isinstance(match, tuple):
                        valor = ' '.join(str(m) for m in match if m).strip()
                    else:
                        valor = str(match).strip()
                    
                    if valor and len(valor) > 1:
                        valores_encontrados.append(valor)
            
            if valores_encontrados:
                caracteristicas[categoria] = list(set(valores_encontrados))
        
        return caracteristicas
    
    def calcular_compatibilidade_catmat(self, desc_edital, produto):
        """Calcula compatibilidade usando metodologia CATMAT"""
        
        # Preparar texto do produto
        texto_produto = ""
        for campo in ['MODELO', 'DESCRI√á√ÉO', 'DESCRICAO', 'DESCRIPTION']:
            if campo in produto and pd.notna(produto[campo]):
                texto_produto += " " + str(produto[campo])
        
        if not texto_produto.strip():
            return 0.0, {}
        
        # 1. AN√ÅLISE DE CATEGORIA (40%) - Baseada no CATMAT
        categorias_edital = self.extrair_categoria_catmat(desc_edital)
        categorias_produto = self.extrair_categoria_catmat(texto_produto)
        
        score_categoria = 0.0
        if categorias_edital and categorias_produto:
            categorias_comuns = set(categorias_edital) & set(categorias_produto)
            if categorias_comuns:
                score_categoria = (len(categorias_comuns) / len(categorias_edital)) * 100
            else:
                # Categoria incompat√≠vel - rejeitar
                return 0.0, {
                    'categoria': 0.0,
                    'caracteristicas': 0.0,
                    'semantico': 0.0,
                    'motivo_rejeicao': 'Categoria CATMAT incompat√≠vel',
                    'categorias_edital': categorias_edital,
                    'categorias_produto': categorias_produto
                }
        else:
            score_categoria = 30.0  # Score neutro se n√£o identificar categoria
        
        # 2. AN√ÅLISE DE CARACTER√çSTICAS CATMAT (35%)
        carac_edital = self.extrair_caracteristicas_catmat(desc_edital)
        carac_produto = self.extrair_caracteristicas_catmat(texto_produto)
        
        score_caracteristicas = 0.0
        detalhes_caracteristicas = {}
        
        if carac_edital:
            total_caracteristicas = len(carac_edital)
            caracteristicas_atendidas = 0
            
            for categoria_carac, valores_edital in carac_edital.items():
                if categoria_carac in carac_produto:
                    valores_produto = carac_produto[categoria_carac]
                    
                    # Verificar compatibilidade dos valores
                    compativel = self.verificar_compatibilidade_valores(valores_edital, valores_produto)
                    
                    if compativel:
                        caracteristicas_atendidas += 1
                        detalhes_caracteristicas[categoria_carac] = {
                            'edital': valores_edital,
                            'produto': valores_produto,
                            'status': 'COMPATIVEL'
                        }
                    else:
                        detalhes_caracteristicas[categoria_carac] = {
                            'edital': valores_edital,
                            'produto': valores_produto,
                            'status': 'INCOMPATIVEL'
                        }
                else:
                    detalhes_caracteristicas[categoria_carac] = {
                        'edital': valores_edital,
                        'produto': [],
                        'status': 'NAO_INFORMADO'
                    }
            
            score_caracteristicas = (caracteristicas_atendidas / total_caracteristicas) * 100
        
        # 3. AN√ÅLISE SEM√ÇNTICA (25%)
        score_semantico = self.calcular_similaridade_semantica(desc_edital, texto_produto)
        
        # 4. VERIFICA√á√ÉO DE CRIT√âRIOS M√çNIMOS
        if score_categoria < ConfigCATMAT.MIN_COMPATIBILIDADE_CATEGORIA:
            return 0.0, {
                'categoria': round(score_categoria, 2),
                'caracteristicas': round(score_caracteristicas, 2),
                'semantico': round(score_semantico, 2),
                'motivo_rejeicao': 'Categoria insuficiente (< ' + str(ConfigCATMAT.MIN_COMPATIBILIDADE_CATEGORIA) + '%)',
                'categorias_edital': categorias_edital,
                'categorias_produto': categorias_produto,
                'detalhes_caracteristicas': detalhes_caracteristicas
            }
        
        if score_caracteristicas < ConfigCATMAT.MIN_COMPATIBILIDADE_CARACTERISTICAS:
            return 0.0, {
                'categoria': round(score_categoria, 2),
                'caracteristicas': round(score_caracteristicas, 2),
                'semantico': round(score_semantico, 2),
                'motivo_rejeicao': 'Caracter√≠sticas insuficientes (< ' + str(ConfigCATMAT.MIN_COMPATIBILIDADE_CARACTERISTICAS) + '%)',
                'categorias_edital': categorias_edital,
                'categorias_produto': categorias_produto,
                'detalhes_caracteristicas': detalhes_caracteristicas
            }
        
        # 5. SCORE FINAL PONDERADO
        score_final = (
            score_categoria * 0.40 +
            score_caracteristicas * 0.35 +
            score_semantico * 0.25
        )
        
        detalhes = {
            'categoria': round(score_categoria, 2),
            'caracteristicas': round(score_caracteristicas, 2),
            'semantico': round(score_semantico, 2),
            'final': round(score_final, 2),
            'categorias_edital': categorias_edital,
            'categorias_produto': categorias_produto,
            'detalhes_caracteristicas': detalhes_caracteristicas,
            'aprovado': score_final >= ConfigCATMAT.MIN_COMPATIBILIDADE
        }
        
        return round(score_final, 2), detalhes
    
    def verificar_compatibilidade_valores(self, valores_edital, valores_produto):
        """Verifica se os valores s√£o compat√≠veis"""
        for val_edital in valores_edital:
            for val_produto in valores_produto:
                # Normalizar valores
                val_e_norm = self.normalizar_texto_catmat(val_edital)
                val_p_norm = self.normalizar_texto_catmat(val_produto)
                
                # Verificar compatibilidade exata ou parcial
                if val_e_norm == val_p_norm:
                    return True
                elif val_e_norm in val_p_norm or val_p_norm in val_e_norm:
                    return True
                elif self.verificar_compatibilidade_numerica(val_e_norm, val_p_norm):
                    return True
        
        return False
    
    def verificar_compatibilidade_numerica(self, val1, val2):
        """Verifica compatibilidade de valores num√©ricos"""
        # Extrair n√∫meros e unidades
        match1 = re.search(r'(\d+(?:\.\d+)?)\s*([A-Z]*)', val1)
        match2 = re.search(r'(\d+(?:\.\d+)?)\s*([A-Z]*)', val2)
        
        if match1 and match2:
            num1, unit1 = match1.groups()
            num2, unit2 = match2.groups()
            
            # Se unidades s√£o iguais, verificar toler√¢ncia num√©rica
            if unit1 == unit2:
                try:
                    n1, n2 = float(num1), float(num2)
                    # Toler√¢ncia de 10%
                    return abs(n1 - n2) / max(n1, n2) <= 0.1
                except:
                    pass
        
        return False
        
    def calcular_similaridade_semantica(self, texto1, texto2):
        """Calcula similaridade sem√¢ntica"""
        if self.pipeline_embeddings:
            try:
                texto1_norm = self.normalizar_texto_catmat(texto1)
                texto2_norm = self.normalizar_texto_catmat(texto2)

                if not texto1_norm or not texto2_norm:
                    return 0.0

                emb1 = self.pipeline_embeddings(texto1_norm)
                emb2 = self.pipeline_embeddings(texto2_norm)

                emb1_mean = np.array(emb1).mean(axis=1).flatten()
                emb2_mean = np.array(emb2).mean(axis=1).flatten()

                dot_product = np.dot(emb1_mean, emb2_mean)
                norm1 = np.linalg.norm(emb1_mean)
                norm2 = np.linalg.norm(emb2_mean)

                if norm1 == 0 or norm2 == 0:
                    return 0.0

                similarity = dot_product / (norm1 * norm2)
                return float(similarity * 100)

            except Exception as e:
                print("‚ö†Ô∏è Erro no pipeline sem√¢ntico:", e)

        return self.calcular_similaridade_palavras_contextuais(texto1, texto2)

    
    def calcular_jaccard_melhorado(self, texto1, texto2):
        """Jaccard com peso para palavras importantes"""
        palavras1 = set(self.normalizar_texto_catmat(texto1).split())
        palavras2 = set(self.normalizar_texto_catmat(texto2).split())
        
        if not palavras1 or not palavras2:
            return 0.0
        
        # Palavras importantes (> 3 caracteres)
        importantes1 = set(p for p in palavras1 if len(p) > 3)
        importantes2 = set(p for p in palavras2 if len(p) > 3)
        
        # Jaccard b√°sico
        intersecao = palavras1.intersection(palavras2)
        uniao = palavras1.union(palavras2)
        jaccard_basico = (len(intersecao) / len(uniao)) * 100 if uniao else 0.0
        
        # B√¥nus para palavras importantes
        if importantes1 and importantes2:
            intersecao_imp = importantes1.intersection(importantes2)
            bonus = (len(intersecao_imp) / len(importantes1)) * 25
        else:
            bonus = 0
        
        return min(jaccard_basico + bonus, 100.0)

class AnalisadorLicitacao:
    """An√°lise espec√≠fica para licita√ß√µes governamentais"""
    
    def __init__(self, processador):
        self.processador = processador
    
    def analisar_edital(self, descricao):
        """An√°lise completa do edital"""
        texto = descricao.upper()
        
        # Verificar margem de prefer√™ncia
        tem_margem_preferencia = self.verificar_margem_preferencia(texto)
        
        # Verificar direcionamento
        analise_direcionamento = self.analisar_direcionamento(texto)
        
        # Verificar sustentabilidade
        criterios_sustentabilidade = self.verificar_criterios_sustentabilidade(texto)
        
        return {
            'margem_preferencia': tem_margem_preferencia,
            'direcionamento': analise_direcionamento,
            'sustentabilidade': criterios_sustentabilidade,
            'recomendacao_geral': self.gerar_recomendacao(analise_direcionamento, tem_margem_preferencia)
        }
    
    def verificar_margem_preferencia(self, texto):
        """Verifica se aplica margem de prefer√™ncia nacional"""
        indicadores_preferencia = [
            'MARGEM.*PREFERENCIA',
            'PRODUTO.*NACIONAL',
            'FABRICACAO.*NACIONAL',
            'ORIGEM.*NACIONAL',
            'MPB.*MANUFATURADO',
            'DECRETO.*7174'
        ]
        
        for indicador in indicadores_preferencia:
            if re.search(indicador, texto):
                return True
        
        return False
    
    def analisar_direcionamento(self, texto):
        """An√°lise rigorosa de direcionamento para licita√ß√µes"""
        
        # Padr√µes cr√≠ticos
        padroes_criticos = [
            (r'\bMARCA\s+([A-Z][A-Z0-9]*)', 'CRITICO', 'Especifica√ß√£o de marca espec√≠fica'),
            (r'\bEXCLUSIVAMENTE\b', 'CRITICO', 'Uso de termo exclusivo'),
            (r'\bAPENAS\s+([A-Z]+)', 'CRITICO', 'Limita√ß√£o a fornecedor espec√≠fico'),
            (r'\bUNICAMENTE\b', 'CRITICO', 'Restri√ß√£o √∫nica'),
            (r'\bSOMENTE\s+([A-Z]+)', 'CRITICO', 'Limita√ß√£o restritiva')
        ]
        
        # Padr√µes de alerta
        padroes_alerta = [
            (r'\bREFERENCIA\s+([A-Z]+)', 'ALERTA', 'Refer√™ncia a marca espec√≠fica'),
            (r'\bMODELO\s+([A-Z0-9]+)', 'ALERTA', 'Modelo espec√≠fico mencionado'),
            (r'\bFABRICANTE\s+([A-Z]+)', 'ALERTA', 'Fabricante espec√≠fico')
        ]
        
        # Cl√°usulas de prote√ß√£o
        clausulas_protecao = [
            r'\bOU\s+EQUIVALENTE\b',
            r'\bOU\s+SIMILAR\b',
            r'\bOU\s+COMPATIVEL\b',
            r'\bDE\s+QUALIDADE\s+EQUIVALENTE\b'
        ]
        
        problemas_criticos = []
        problemas_alerta = []
        tem_protecao = False
        
        # Verificar padr√µes cr√≠ticos
        for padrao, nivel, descricao in padroes_criticos:
            if re.search(padrao, texto):
                problemas_criticos.append(descricao)
        
        # Verificar padr√µes de alerta
        for padrao, nivel, descricao in padroes_alerta:
            if re.search(padrao, texto):
                problemas_alerta.append(descricao)
        
        # Verificar cl√°usulas de prote√ß√£o
        for clausula in clausulas_protecao:
            if re.search(clausula, texto):
                tem_protecao = True
                break
        
        # Determinar risco
        if problemas_criticos and not tem_protecao:
            risco = 'CRITICO'
            acao = 'IMPUGNAR_IMEDIATAMENTE'
            observacao = 'Direcionamento cr√≠tico identificado sem cl√°usula de equival√™ncia. IMPUGNA√á√ÉO OBRIGAT√ìRIA conforme Lei 14.133/21 (Art. 7¬∫ ¬ß5¬∫).'
        elif problemas_criticos and tem_protecao:
            risco = 'MEDIO'
            acao = 'ANALISAR_JURIDICAMENTE'
            observacao = 'Direcionamento identificado, mas com cl√°usula de equival√™ncia. Avaliar se a cl√°usula √© suficiente.'
        elif problemas_alerta:
            risco = 'BAIXO'
            acao = 'MONITORAR'
            observacao = 'Especifica√ß√µes com refer√™ncias, mas dentro dos padr√µes aceit√°veis.'
        else:
            risco = 'NENHUM'
            acao = 'PARTICIPAR'
            observacao = 'Especifica√ß√£o t√©cnica adequada para competi√ß√£o.'
        
        return {
            'risco': risco,
            'acao_recomendada': acao,
            'observacao': observacao,
            'problemas_criticos': problemas_criticos,
            'problemas_alerta': problemas_alerta,
            'tem_clausula_protecao': tem_protecao
        }
    
    def verificar_criterios_sustentabilidade(self, texto):
        """Verifica crit√©rios de sustentabilidade"""
        criterios = {
            'eficiencia_energetica': bool(re.search(r'EFICIENCIA.*ENERGETICA|SELO.*PROCEL|ENERGY.*STAR', texto)),
            'material_reciclado': bool(re.search(r'MATERIAL.*RECICLADO|RECICLAVEL', texto)),
            'certificacao_ambiental': bool(re.search(r'ISO.*14001|CERTIFICACAO.*AMBIENTAL', texto)),
            'reducao_residuos': bool(re.search(r'REDUCAO.*RESIDUOS|MENOS.*EMBALAGEM', texto))
        }
        
        return criterios
    
    def gerar_recomendacao(self, analise_direcionamento, tem_margem_preferencia):
        """Gera recomenda√ß√£o geral"""
        if analise_direcionamento['risco'] == 'CRITICO':
            return 'N√ÉO PARTICIPAR - IMPUGNAR EDITAL'
        elif analise_direcionamento['risco'] == 'MEDIO':
            return 'PARTICIPAR COM CAUTELA - AN√ÅLISE JUR√çDICA'
        elif tem_margem_preferencia:
            return 'PARTICIPAR - CONSIDERAR MARGEM DE PREFER√äNCIA'
        else:
            return 'PARTICIPAR NORMALMENTE'

class MatchingCATMAT:
    """Sistema principal baseado no modelo CATMAT"""
    
    def __init__(self):
        print("üéØ SISTEMA DE MATCHING BASEADO NO MODELO CATMAT")
        print("=" * 70)
        print("Especializado para Licita√ß√µes Governamentais")
        print("Baseado no Cat√°logo de Materiais do Governo Federal")
        print("=" * 70)
        print("üöÄ Inicializando sistema CATMAT...")
        
        self.processador = ProcessadorCATMAT()
        self.analisador = AnalisadorLicitacao(self.processador)
        self.produtos_df = None
        self.resultados = []
        self.estatisticas = {
            'total_analisados': 0,
            'rejeitados_categoria': 0,
            'rejeitados_caracteristicas': 0,
            'aprovados': 0,
            'com_margem_preferencia': 0
        }
    
    def verificar_caminhos(self):
        """Verifica caminhos dos arquivos"""
        print("\nüîç Verificando caminhos...")
        
        caminhos_produtos = [
            ConfigCATMAT.PRODUTOS_PATH,
            r"C:\Users\pietr\Meu Drive\ARTE\PRODUTOS.xlsx",
            r"C:\Users\pietr\.vscode\arte_comercial\PRODUTOS.xlsx"
        ]
        
        caminhos_orcamentos = [
            ConfigCATMAT.ORCAMENTOS_PATH,
            r"C:\Users\pietr\Meu Drive\ARTE\AUTO\ORCAMENTOS",
            r"C:\Users\pietr\.vscode\arte_comercial\ORCAMENTOS"
        ]
        
        produto_encontrado = None
        for caminho in caminhos_produtos:
            if os.path.exists(caminho):
                produto_encontrado = caminho
                print("‚úÖ Produtos: " + caminho)
                break
        
        orcamento_encontrado = None
        for caminho in caminhos_orcamentos:
            if os.path.exists(caminho):
                orcamento_encontrado = caminho
                print("‚úÖ Or√ßamentos: " + caminho)
                break
        
        return produto_encontrado, orcamento_encontrado
    
    def carregar_dados(self):
        """Carrega dados"""
        print("\nüìÇ Carregando dados...")
        
        try:
            produto_path, orcamento_path = self.verificar_caminhos()
            
            if not produto_path:
                print("‚ùå Arquivo PRODUTOS.xlsx n√£o encontrado")
                return False
            
            if not orcamento_path:
                print("‚ùå Pasta ORCAMENTOS n√£o encontrada")
                return False
            
            # Carregar produtos
            self.produtos_df = pd.read_excel(produto_path)
            self.produtos_df.columns = self.produtos_df.columns.str.strip()
            print("‚úÖ " + str(len(self.produtos_df)) + " produtos carregados")
            
            # Listar or√ßamentos
            pasta = Path(orcamento_path)
            self.arquivos = list(pasta.glob("*.xlsx"))
            print("‚úÖ " + str(len(self.arquivos)) + " arquivos encontrados")
            
            return len(self.arquivos) > 0
            
        except Exception as e:
            print("‚ùå Erro: " + str(e))
            return False
    
    def extrair_valor(self, valor):
        """Extrai valor num√©rico"""
        if pd.isna(valor):
            return 0.0
        
        valor_str = str(valor).replace('.', '').replace(',', '.')
        try:
            match = re.search(r'[\d\.]+', valor_str)
            return float(match.group()) if match else 0.0
        except:
            return 0.0
    
    def processar_tudo(self):
        """Processa todos os arquivos com metodologia CATMAT"""
        if not self.carregar_dados():
            return False
        
        print("\nüîç Processando com metodologia CATMAT...")
        print("üìã Crit√©rios: Categoria ‚â•" + str(ConfigCATMAT.MIN_COMPATIBILIDADE_CATEGORIA) + "%, Caracter√≠sticas ‚â•" + str(ConfigCATMAT.MIN_COMPATIBILIDADE_CARACTERISTICAS) + "%")
        
        for arquivo in self.arquivos:
            print("\nüìÑ Processando: " + arquivo.name)
            
            try:
                df_edital = pd.read_excel(arquivo)
                matches_arquivo = 0
                
                for _, item in df_edital.iterrows():
                    self.estatisticas['total_analisados'] += 1
                    matches = self.processar_item(item, arquivo.name)
                    matches_arquivo += matches
                
                print("   ‚úÖ " + str(matches_arquivo) + " matches CATMAT encontrados")
                
            except Exception as e:
                print("   ‚ùå Erro: " + str(e))
                continue
        
        self.imprimir_estatisticas()
        return True
    
    def processar_item(self, item, arquivo):
        """Processa item com metodologia CATMAT"""
        # Extrair dados
        num_item = item.get('N√∫mero do Item', 'N/A')
        desc_edital = str(item.get('Item', ''))
        unidade = item.get('Unidade de Fornecimento', 'UN')
        qtd = float(item.get('Quantidade Total', 0))
        valor_ref = self.extrair_valor(item.get('Valor Unit√°rio (R$)', 0))
        
        if not desc_edital or valor_ref <= 0:
            return 0
        
        # An√°lise do edital
        analise_edital = self.analisador.analisar_edital(desc_edital)
        
        # Buscar matches com metodologia CATMAT
        matches_encontrados = []
        
        for _, produto in self.produtos_df.iterrows():
            # An√°lise CATMAT
            score, detalhes = self.processador.calcular_compatibilidade_catmat(desc_edital, produto)
            
            # Aplicar crit√©rios CATMAT
            if score == 0.0:
                if 'motivo_rejeicao' in detalhes:
                    if 'Categoria' in detalhes['motivo_rejeicao']:
                        self.estatisticas['rejeitados_categoria'] += 1
                    elif 'Caracter√≠sticas' in detalhes['motivo_rejeicao']:
                        self.estatisticas['rejeitados_caracteristicas'] += 1
                continue
            
            if score < ConfigCATMAT.MIN_COMPATIBILIDADE:
                continue
            
            # Verificar pre√ßo com margem de prefer√™ncia
            valor_produto = self.extrair_valor(produto.get('VALOR', produto.get('Valor', 0)))
            
            if valor_produto > 0:
                # Aplicar margem de prefer√™ncia se aplic√°vel
                margem_final = ConfigCATMAT.MARGEM_DISPUTA
                
                if analise_edital['margem_preferencia']:
                    # Verificar se produto √© nacional
                    origem = str(produto.get('ORIGEM', produto.get('Origem', ''))).upper()
                    if 'NACIONAL' in origem or 'BRASIL' in origem:
                        margem_final += ConfigCATMAT.MARGEM_PREFERENCIA_NACIONAL
                        self.estatisticas['com_margem_preferencia'] += 1
                
                valor_disputa = valor_produto * (1 + margem_final)
                
                if valor_disputa <= valor_ref:
                    self.estatisticas['aprovados'] += 1
                    matches_encontrados.append({
                        'produto': produto,
                        'score': score,
                        'detalhes': detalhes,
                        'valor_produto': valor_produto,
                        'valor_disputa': valor_disputa,
                        'margem_aplicada': margem_final,
                        'tem_preferencia': analise_edital['margem_preferencia']
                    })
        
        # Ordenar por score CATMAT
        matches_encontrados.sort(key=lambda x: (-x['score'], x['valor_disputa']))
        
        for match in matches_encontrados[:ConfigCATMAT.MAX_SUGESTOES]:
            self.adicionar_resultado(num_item, desc_edital, unidade, qtd, valor_ref, match, analise_edital, arquivo)
        
        return len(matches_encontrados[:ConfigCATMAT.MAX_SUGESTOES])
    
    def adicionar_resultado(self, num_item, desc_edital, unidade, qtd, valor_ref, match, analise_edital, arquivo):
        """Adiciona resultado com an√°lise CATMAT"""
        produto = match['produto']
        score = match['score']
        detalhes = match['detalhes']
        valor_produto = match['valor_produto']
        valor_disputa = match['valor_disputa']
        margem_aplicada = match['margem_aplicada']
        
        # Justificativa CATMAT
        justificativa = "AN√ÅLISE CATMAT: "
        justificativa += "Categoria: " + str(detalhes['categoria']) + "% | "
        justificativa += "Caracter√≠sticas: " + str(detalhes['caracteristicas']) + "% | "
        justificativa += "Sem√¢ntico: " + str(detalhes['semantico']) + "%"
        
        if detalhes.get('categorias_edital'):
            justificativa += " | Cat: " + ', '.join(detalhes['categorias_edital'])
        
        # Caracter√≠sticas atendidas
        carac_atendidas = []
        if 'detalhes_caracteristicas' in detalhes:
            for carac, info in detalhes['detalhes_caracteristicas'].items():
                if info['status'] == 'COMPATIVEL':
                    carac_atendidas.append(carac)
        
        # Classifica√ß√£o CATMAT
        if score >= 95:
            classificacao_catmat = "EXCELENTE"
        elif score >= 90:
            classificacao_catmat = "OTIMO"
        elif score >= 85:
            classificacao_catmat = "BOM"
        else:
            classificacao_catmat = "ACEITAVEL"
        
        resultado = {
            'Arquivo': arquivo,
            'Item': num_item,
            'Descri√ß√£o Edital': desc_edital,
            'Unidade': unidade,
            'Quantidade': qtd,
            'Valor Ref. Unit√°rio': valor_ref,
            'Valor Ref. Total': valor_ref * qtd,
            'Marca sugerida': produto.get('MARCA', 'N/A'),
            'Produto Sugerido': produto.get('MODELO', 'N/A'),
            'Descri√ß√£o Produto': str(produto.get('DESCRI√á√ÉO', produto.get('DESCRICAO', 'N/A')))[:150],
            'Pre√ßo Fornecedor': valor_produto,
            'Margem Aplicada (%)': round(margem_aplicada * 100, 1),
            'Pre√ßo com Margem': valor_disputa,
            'Economia Estimada': max(0, (valor_ref - valor_disputa) * qtd),
            'Score CATMAT': round(score, 2),
            'Score Categoria': detalhes['categoria'],
            'Score Caracter√≠sticas': detalhes['caracteristicas'],
            'Score Sem√¢ntico': detalhes['semantico'],
            'Classifica√ß√£o CATMAT': classificacao_catmat,
            'Caracter√≠sticas Atendidas': ', '.join(carac_atendidas[:3]),
            'Justificativa CATMAT': justificativa,
            'Categorias Identificadas': ', '.join(detalhes.get('categorias_edital', [])),
            'Tem Margem Prefer√™ncia?': 'Sim' if match['tem_preferencia'] else 'N√£o',
            'Risco Jur√≠dico': analise_edital['direcionamento']['risco'],
            'A√ß√£o Recomendada': analise_edital['direcionamento']['acao_recomendada'],
            'Recomenda√ß√£o Geral': analise_edital['recomendacao_geral'],
            'Observa√ß√£o Jur√≠dica': analise_edital['direcionamento']['observacao'],
            'Fornecedor': produto.get('FORNECEDOR', 'N/A')
        }
        
        self.resultados.append(resultado)
    
    def imprimir_estatisticas(self):
        """Imprime estat√≠sticas CATMAT"""
        print("\nüìä ESTAT√çSTICAS CATMAT:")
        print("=" * 50)
        print("Total analisados: " + str(self.estatisticas['total_analisados']))
        print("Rejeitados por categoria: " + str(self.estatisticas['rejeitados_categoria']))
        print("Rejeitados por caracter√≠sticas: " + str(self.estatisticas['rejeitados_caracteristicas']))
        print("Aprovados: " + str(self.estatisticas['aprovados']))
        print("Com margem de prefer√™ncia: " + str(self.estatisticas['com_margem_preferencia']))
        
        if self.estatisticas['total_analisados'] > 0:
            taxa_aprovacao = (self.estatisticas['aprovados'] / self.estatisticas['total_analisados']) * 100
            print("Taxa de aprova√ß√£o CATMAT: " + str(round(taxa_aprovacao, 1)) + "%")
    
    def gerar_relatorios(self):
        """Gera relat√≥rios especializados para licita√ß√µes"""
        if not self.resultados:
            print("‚ùå Nenhum resultado CATMAT encontrado")
            return False
        
        print("\nüìä Gerando relat√≥rios CATMAT...")
        
        df_final = pd.DataFrame(self.resultados)
        
        # Estat√≠sticas
        total_items = df_final['Item'].nunique()
        matches_excelentes = len(df_final[df_final['Score CATMAT'] >= 95])
        economia_total = df_final['Economia Estimada'].sum()
        itens_margem_preferencia = len(df_final[df_final['Tem Margem Prefer√™ncia?'] == 'Sim'])
        
        # Pasta de sa√≠da
        if hasattr(self, 'arquivos') and self.arquivos:
            pasta_saida = self.arquivos[0].parent
        else:
            pasta_saida = Path(ConfigCATMAT.ORCAMENTOS_PATH)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        try:
            # Arquivos principais
            arquivo_csv = pasta_saida / "RESULTADO_MATCHING_INTELIGENTE.csv"
            arquivo_excel = pasta_saida / "RELATORIO_MATCHING_COMPLETO.xlsx"
            
            df_final.to_csv(arquivo_csv, index=False, encoding='utf-8-sig')
            df_final.to_excel(arquivo_excel, index=False)
            
            # Arquivo CATMAT espec√≠fico
            arquivo_catmat = pasta_saida / ("MATCHING_CATMAT_" + timestamp + ".csv")
            df_final.to_csv(arquivo_catmat, index=False, encoding='utf-8-sig')
            
            # Relat√≥rio executivo CATMAT
            resumo = """# üìä RELAT√ìRIO CATMAT - LICITA√á√ïES GOVERNAMENTAIS

**Data**: """ + datetime.now().strftime('%d/%m/%Y %H:%M') + """
**Sistema**: Matching baseado no modelo CATMAT
**Metodologia**: An√°lise por categoria + caracter√≠sticas t√©cnicas + sem√¢ntica

## üìà ESTAT√çSTICAS CATMAT

- **Itens Analisados**: """ + str(total_items) + """
- **Matches CATMAT**: """ + str(len(df_final)) + """
- **Matches Excelentes (‚â•95%)**: """ + str(matches_excelentes) + """
- **Economia Total**: R$ """ + "{:,.2f}".format(economia_total) + """
- **Itens com Margem Prefer√™ncia**: """ + str(itens_margem_preferencia) + """

## üèÜ TOP 10 MELHORES MATCHES CATMAT

""" + df_final.nlargest(10, 'Score CATMAT')[['Item', 'Produto Sugerido', 'Score CATMAT', 'Classifica√ß√£o CATMAT']].to_string(index=False) + """

## ‚öñÔ∏è AN√ÅLISE JUR√çDICA PARA LICITA√á√ïES

- **Risco Cr√≠tico**: """ + str(len(df_final[df_final['Risco Jur√≠dico'] == 'CRITICO'])) + """ itens
- **Risco M√©dio**: """ + str(len(df_final[df_final['Risco Jur√≠dico'] == 'MEDIO'])) + """ itens
- **Risco Baixo/Nenhum**: """ + str(len(df_final[df_final['Risco Jur√≠dico'].isin(['BAIXO', 'NENHUM'])])) + """ itens

## üáßüá∑ MARGEM DE PREFER√äNCIA NACIONAL

- **Produtos com Prefer√™ncia**: """ + str(itens_margem_preferencia) + """
- **Margem Aplicada**: """ + str(ConfigCATMAT.MARGEM_PREFERENCIA_NACIONAL * 100) + """% adicional

## üî¨ METODOLOGIA CATMAT

1. **An√°lise de Categoria (40%)**: Compatibilidade com categorias CATMAT
2. **An√°lise de Caracter√≠sticas (35%)**: Especifica√ß√µes t√©cnicas detalhadas
3. **An√°lise Sem√¢ntica (25%)**: Compreens√£o contextual do produto

## üí° RECOMENDA√á√ïES PARA LICITA√á√ïES

1. **Priorizar matches com Score CATMAT ‚â• 90%**
2. **Verificar itens com risco jur√≠dico cr√≠tico antes da participa√ß√£o**
3. **Aproveitar margem de prefer√™ncia para produtos nacionais**
4. **Considerar caracter√≠sticas t√©cnicas atendidas na proposta**

---
*Relat√≥rio gerado com metodologia CATMAT para m√°xima precis√£o em licita√ß√µes*
"""
            
            arquivo_md = pasta_saida / ("RELATORIO_CATMAT_" + timestamp + ".md")
            with open(arquivo_md, 'w', encoding='utf-8') as f:
                f.write(resumo)
            
            print("‚úÖ Relat√≥rios CATMAT gerados!")
            print("üìÅ Pasta: " + str(pasta_saida))
            print("üìÑ CSV Principal: RESULTADO_MATCHING_INTELIGENTE.csv")
            print("üìä Excel Principal: RELATORIO_MATCHING_COMPLETO.xlsx")
            print("üìÑ CATMAT CSV: " + arquivo_catmat.name)
            print("üìù Relat√≥rio: " + arquivo_md.name)
            print("üí∞ Economia total: R$ " + "{:,.2f}".format(economia_total))
            print("üéØ Matches excelentes: " + str(matches_excelentes))
            print("üáßüá∑ Com margem prefer√™ncia: " + str(itens_margem_preferencia))
            
            return True
            
        except Exception as e:
            print("‚ùå Erro ao gerar relat√≥rios: " + str(e))
            return False

def main():
    """Fun√ß√£o principal"""
    print("üéØ SISTEMA DE MATCHING BASEADO NO MODELO CATMAT")
    print("=" * 70)
    print("üèõÔ∏è ESPECIALIZADO PARA LICITA√á√ïES GOVERNAMENTAIS")
    print("üìã Baseado no Cat√°logo de Materiais do Governo Federal")
    print("‚öñÔ∏è An√°lise jur√≠dica espec√≠fica para editais p√∫blicos")
    print("üáßüá∑ Suporte √† margem de prefer√™ncia nacional")
    print("=" * 70)
    
    # Executar
    matcher = MatchingCATMAT()
    
    try:
        if matcher.processar_tudo():
            if matcher.gerar_relatorios():
                print("\nüéâ SUCESSO! Sistema CATMAT executado com √™xito.")
                print("üìÅ Relat√≥rios especializados para licita√ß√µes gerados")
                print("üèõÔ∏è Pronto para participa√ß√£o em editais governamentais!")
            else:
                print("\n‚ö†Ô∏è Processamento OK, mas erro nos relat√≥rios")
        else:
            print("\n‚ùå Erro no processamento")
    
    except Exception as e:
        print("\nüí• Erro: " + str(e))
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()